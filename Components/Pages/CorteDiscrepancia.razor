@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject TooltipService tooltipService
@inject DialogService DialogService
@inject ILocalStorageService LocalStorage
@inject INotifiRadzenServices NotifiRadzenServices
@inject ICorteDiscrepancia CorteDiscrepanciaDataService
@inject IRolLogic RolLogicService

@page "/cortediscrepancia"

<FiltroMaestras OnChangepais="((int p) => this.valuepais = p)"
                OnChangeempresa="((int e) => this.valueempresa = e)"
                OnChangecentros="((int c) => this.valuecentros = c)"
                OnChangedivision="((int d) => this.valuedivision = d)"
                OnChangelineas="((int l) => this.valuelinea = l)" />


@if (filtrosextras && valuelinea > 0)
{
    <FiltrosAsentamientos idLinea="@valuelinea"
                          OnChangeClasificacion="((int idClasiVar) => this.idClasiVar = idClasiVar)"
                          OnChangeProducto="((int idProducto) => this.idProducto = idProducto)"
                          OnChangeSeccion="((int idSeccion) => this.idSeccion = idSeccion)" />
}
@if (valuelinea != 0)
{
    <FiltroGrupoTurno idEmpresa="@valueempresa" OnChangeGrupo="((string g) => this.grupo = g)" OnChangeTurno="((string t) => this.turno = t)" />
}
@if (valuelinea != 0 && turno is not null)
{
    @*     Barra de filtro y opciones *@
    <RadzenCard Variant="Variant.Filled" Class="rz-my-4  rz-background-color-base-50">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Normal" Wrap="FlexWrap.Wrap">
            <RadzenColumn class="rz-ml-8">
                <RadzenLabel Text="Fecha" Component="DatePickerHourFormat" />
                <RadzenDatePicker @bind-Value=@fecha HourFormat="12" DateFormat="MM/dd/yyyy" Name="DatePickerHourFormat" Style="width:120px;" />
            </RadzenColumn>
            <RadzenColumn class="rz-ml-8">
                <RadzenButton ButtonType="ButtonType.Button" Icon="search" Variant="Variant.Flat" Visible=@((idSeccion>0 && filtrosextras)|| !filtrosextras) Text="Consultar" ButtonStyle="ButtonStyle.Success" Click=ConsultarCortes />
            </RadzenColumn>
            <RadzenColumn class="rz-ml-8" Visible=@(permisos["Centro"])>
                <RadzenRow>
                    <RadzenText TextStyle="TextStyle.Caption"> Filtros:</RadzenText>
                </RadzenRow>
                <RadzenRow>

                    <RadzenCheckBox @bind-Value="@filtrosextrasvisual" TValue="bool" Change=@CambioFiltros />
                </RadzenRow>
            </RadzenColumn>
        </RadzenStack>
    </RadzenCard>
}
<RadzenCard Style=" padding: 0;" Class="rz-shadow-2 rz-mx-auto w-auto">


    <RadzenDataGrid Visible=@(data==1) Data="@listacortes" TItem="CortesVistaDTO"
                    AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                    AllowColumnResize=true GridLines="DataGridGridLines.Both"
                    AllowSorting="true" IsLoading=loaddata>

        <Columns>

            <RadzenDataGridColumn TItem="CortesVistaDTO" Property="Pnombre" Title="Producto" Sortable="false" Filterable=true Width="10%" Visible=!filtrosextras />
            <RadzenDataGridColumn TItem="CortesVistaDTO" Property="Vnombre" Title="Variable" Sortable="false" Filterable=true Width="15%" />
            <RadzenDataGridColumn TItem="CortesVistaDTO" Property="SNombre" Title="Sección" Sortable="false" Filterable=true Width="15%" Visible=!filtrosextras />
            <RadzenDataGridColumn TItem="CortesVistaDTO" Property="CdaccCorr" Title="Acción" Sortable="false" Width="20%">
                <Template Context="data">
                    @if (data.CdaccCorr == "Definir")
                    {
                        <span style='color: var(--rz-danger-darker)'>@data.CdaccCorr</span>
                    }
                    else
                    {
                        @data.CdaccCorr
                    }
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="CortesVistaDTO" Property="Cnombre" Title="Categoría" Sortable="false" Filterable=true Width="12%" />
            <RadzenDataGridColumn TItem="CortesVistaDTO" Property="Avalor" Title="Valor" Filterable=false Width="18%">
                <Template Context="valor">
                    @*  @($"{valor.Avalor}  {valor.Unombre}") *@
                    @if (valor.Avalor > valor.Rmax)
                    {
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
                            <RadzenBadge BadgeStyle="BadgeStyle.Light" Shade="Shade.Lighter" class="unidad-badge" Text="@($"{valor.Avalor}  {valor.Unombre}")"
                                         MouseEnter="@((args) => tooltipService.OpenOnTheLeft(args,$"{@valor.Rmax} límite max." ,
                            new TooltipOptions{   Duration=1500,Style = "background-color: var(--rz-danger-light); color:var(--rz-base-800);"}))" />

                            <RadzenIcon Icon="warning" IconColor="@Colors.Danger" MouseEnter="@((args) => tooltipService.OpenOnTheRight(args,  $"V. Objetivo: {valor.Robj}",
                            new TooltipOptions{   Duration=1000,Style = "background-color: var(--rz-danger-light); color:var(--rz-base-800);"}))" />
                        </RadzenStack>
                    }
                    else
                    {
                        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Start" Wrap="FlexWrap.Wrap">
                            <RadzenBadge BadgeStyle="BadgeStyle.Light" Shade="Shade.Light" class="unidad-badge" Text="@($"{valor.Avalor}  {valor.Unombre}")"
                                         MouseEnter="@((args) => tooltipService.OpenOnTheLeft(args,  $"{@valor.Rmin} límite min." ,
                        new TooltipOptions{   Duration=1500,Style = "background-color: var(--rz-warning-light); color:var(--rz-base-800);"}))" />

                            <RadzenIcon Icon="warning" IconColor="@Colors.Warning" MouseEnter="@((args) => tooltipService.OpenOnTheRight(args,$"V. Objetivo: {valor.Robj}",
                        new TooltipOptions{   Duration=1000,Style = "background-color: var(--rz-warning-light); color:var(--rz-base-800);"}))" />
                        </RadzenStack>
                    }

                </Template>
            </RadzenDataGridColumn>


            <RadzenDataGridColumn TItem="CortesVistaDTO" Property="CdisListo" Title="Estado" Sortable="true" Filterable="false" Width="10%">
                <Template Context="est">
                    @if (est.CdisListo)
                    {

                        <RadzenIcon Icon="done" Style="display: flex; justify-content: center; font-size:30px; font-weight: 800;" class="m-auto"
                                    IconColor="@Colors.Success" MouseEnter="@((args) => tooltipService.OpenOnTheLeft(args, "Resuelto.",
                         new TooltipOptions{ Style = "background-color: var(--rz-success-lighter);  color:var(--rz-base-800);", Duration=1000} ))" />
                    }
                    else if (!est.CdisListo && !est.CdisLibro)
                    {
                        <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap">
                            <RadzenIcon Icon="info" IconColor="@Colors.Danger" Style="font-size:25px;" class="m-auto" MouseEnter="@((args) => tooltipService.OpenOnTheLeft(args, "En Dicrepancia.",
                         new TooltipOptions{ Style = "background-color: var(--rz-danger-lighter);  color:var(--rz-base-800);", Duration=1000} ))" />
                            @if (permisos["Centro"])
                            {
                                <div class="m-auto">
                                    <RadzenButton Icon="assignment_late" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Warning" Click=@( () => ShowDialog(est) )
                                                  MouseEnter="@((args) => tooltipService.OpenOnTheLeft(args, "Editar Corte",
                                new TooltipOptions{ Style = "background-color: var(--rz-warning-lighter);  color:var(--rz-base-800);", Duration=1000} ))" class="rz-border-radius-10 rz-shadow-2" />

                                    <RadzenButton Icon="auto_stories" Size="ButtonSize.Small" ButtonStyle="ButtonStyle.Info" Click=@( () => ShowDialogLibro(est) )
                                                  MouseEnter="@((args) => tooltipService.OpenOnTheLeft(args, "Libro de Novedades",
                                new TooltipOptions{   Duration=1000,Style = "background-color: var(--rz-info-lighter);  color:var(--rz-base-800);"}))" class="rz-border-radius-10 rz-shadow-2" />
                                </div>
                            }
                        </RadzenStack>
                    }
                    else
                    {

                        <RadzenIcon Icon="assignment_late" Style="display: flex; justify-content: center; font-size:30px; font-weight: 800;" class="m-auto"
                                    IconColor="@Colors.Warning" MouseEnter="@((args) => tooltipService.OpenOnTheLeft(args, "En Libro Novedades",
                         new TooltipOptions{ Style = "background-color: var(--rz-warning-lighter);  color:var(--rz-base-800);", Duration=1000} ))" />
                    }

                </Template>

            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>

</RadzenCard>

<RadzenText Visible="@(data==2)">
    <RadzenIcon Icon="warning" IconColor="@Colors.Warning" />
    No hay datos...
</RadzenText>

@if (loading)
{
    <Load />
}

@code {
    [CascadingParameter]
    private IEnumerable<Claim>? claims { get; set; }
    public List<CortesVistaDTO>? listacortes { get; set; } = new List<CortesVistaDTO>();
    public List<CategoriaDTO>? categorias { get; set; }

    bool loading = false; //motrar loading
    bool loaddata = false; //motrar loading
    int data = 0; //1-motrar tabla de datos 2-no haydata
    bool filtrosextrasvisual = true; //motrar lfiltros extras
    bool filtrosextras = true; //motrar lfiltros extras

    //parametros retornado en el componente Hijo FiltroMaestra
    public int valuepais { get; set; } = 0;
    public int valueempresa { get; set; } = 0;
    public int valuecentros { get; set; } = 0;
    public int valuedivision { get; set; } = 0;
    public int valuelinea { get; set; } = 0;

    //parametros retornado en el componente Hijo FiltroAsentamientos
    public int idClasiVar { get; set; } = 0;
    public int idSeccion { get; set; } = 0;
    public int idProducto { get; set; } = 0;

    //parametros retornado en el componente Hijo FiltroGrupoTurno
    public string grupo { get; set; } = "";
    public string turno { get; set; } = "";


    DateTime fecha = DateTime.Now;
    Dictionary<string, bool> permisos = new Dictionary<string, bool>();
    public string? roleClaim { get; set; } //guardar el rol del usuario
    public string? Ficha { get; set; } //guardar la ficha del usuario

    protected override async Task OnInitializedAsync()
    {
        await CreateData();
        permisos = RolLogicService.ListasRol(roleClaim);
        await GetCategorias();
    }

    private async Task CreateData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user?.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
        }
        //Obtner Rol
        roleClaim = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;
        Ficha = claims.FirstOrDefault(c => c.Type.Equals("Ficha"))?.Value;
    }

    public async Task ConsultarCortes()
    {
        data = 0;
        loading = true;
        string fecha1 = fecha.Date.ToString("yyyy-MM-dd");
        if (!string.IsNullOrEmpty(grupo) && !string.IsNullOrEmpty(turno))
        {
            if (filtrosextras)
            {
                if (idClasiVar > 0 && idSeccion > 0 && idProducto > 0)
                {
                    listacortes = await CorteDiscrepanciaDataService.GetCortesDiscrepanciaLineaFiltrado(turno, fecha1, valuelinea, idClasiVar, idSeccion, idProducto);
                    data = listacortes.Count > 0 ? 1 : 2;
                    NotificationService.Notify(NotifiRadzenServices.Notificacion("info", "", "Datos Actualizados"));
                }
                else
                {
                    data = 1;
                    NotificationService.Notify(NotifiRadzenServices.Notificacion("advertencia", "", "Seleccione los los filtros para consultar."));
                }
            }
            else
            {
                listacortes = await CorteDiscrepanciaDataService.GetCortesDiscrepanciaLinea(turno, fecha1, valuelinea);
                data = listacortes.Count > 0 ? 1 : 2;
                NotificationService.Notify(NotifiRadzenServices.Notificacion("info", "", "Datos Actualizados"));
            }
        }
        else
        {
            NotificationService.Notify(NotifiRadzenServices.Notificacion("advertencia", "", "Seleccione los los filtros grupo y turno."));
        }
        loading = false;
    }


    async Task ShowDialogLibro(CortesVistaDTO corte)
    {
        string Novedad;
        bool success;//update el campo bool de corte a libro

        if (corte.Avalor > corte.Rmax)
        {
            Novedad = $"Valor de {corte.Vnombre} ({corte.SNombre})  con el producto {corte.Pnombre}, en: {corte.Avalor} {corte.Unombre}. Mayor al máximo permisible  ({corte.Rmax} {corte.Unombre}).";
        }
        else
        {
            Novedad = $"Valor de {corte.Vnombre} ({corte.SNombre})  con el producto {corte.Pnombre}, en: {corte.Avalor} {corte.Unombre}. Menor al mínimo permisible ({corte.Rmin} {corte.Unombre}).";
        }

        success = await DialogService.OpenSideAsync<DialogLibroNovedades>(

             $"Crear Novedad a : {corte.Vnombre}",
             parameters: new Dictionary<string, object?>()
                                                             {

                    { "Novedad",Novedad},
                    { "Plan",corte.CdaccCorr },
                    { "IdLinea",valuelinea },
                    { "Ficha",Ficha },
                    { "Turno",turno },
                    { "Grupo",grupo },

                                                         },
             options: new SideDialogOptions
                 {
                     Position = DialogPosition.Right,
                     ShowMask = true,
                     CloseDialogOnOverlayClick = false,
                     ShowClose = false,
                     Width = "40%"
                 });
        loaddata = true;
        ///TODO: add el update real
        if (success)
        {
            CorteDiscDTO corteupdate = LlenarCorte(corte);
            corteupdate.CdfechAcci = corte.CdfechAcci;
            corteupdate.CdisLibro = true;
            corteupdate.CdfechList = DateTime.Now;
            await UpdateCorte(corteupdate);


        }
        loaddata = false;
    }

    async Task ShowDialog(CortesVistaDTO corteeditar)
    {
        DialogCorteDTO cortedialog = new DialogCorteDTO();
        List<AsentumDTO> ListaSendAsenta = new List<AsentumDTO>(); //Lista para editar en el api

        //Llenar corte antes del dialog
        CorteDiscDTO corte = LlenarCorte(corteeditar);

        //LLenar asentamiento en curso
        AsentumDTO asentamientoNuevo = LlenarAsentamiento(corteeditar);
        ListaSendAsenta.Add(asentamientoNuevo);

        cortedialog = await DialogService.OpenSideAsync<DialogSideContent>(
            $"Registrar Corte: {corteeditar.Vnombre}",
            parameters: new Dictionary<string, object?>()
                        {
            { "categorias", categorias },
            { "lmin",corteeditar.Rmin },
            {"lmax",corteeditar.Rmax},
            {"corteparametro", corte },
            {"rol", permisos["Centro"] },
                  {"obser", corteeditar.Aobserv }    },
            options: new SideDialogOptions
                {
                    Position = DialogPosition.Right,
                    ShowMask = true,
                    CloseDialogOnOverlayClick = false
                });

        loaddata = true;
        if (cortedialog is not null)
        {
            var elemento = ListaSendAsenta.First(a => a.IdAsenta > 0);
            corte = LlenarCorte(corteeditar);

            if (cortedialog.CdisListo)
            {

                //desactivar anterior
                ListaSendAsenta.Where(a => a.IdAsenta > 0).ToList().ForEach(a => a.AisActivo = false);

                //crear nuevo asentamiento
                asentamientoNuevo = LlenarAsentamiento(corteeditar);
                asentamientoNuevo.Avalor = cortedialog.Avalor;
                asentamientoNuevo.AisActivo = true;
                asentamientoNuevo.Aobserv = cortedialog.Aobserv;

                ListaSendAsenta.Add(asentamientoNuevo);
                asentamientoNuevo.IdAsenta = 0;//Eliminar Id para insertar nuevo valor
                elemento.AisActivo = false;//Desactivar anterior para insertar el nuevo.

                // corte llisto fecha
                corte.CdfechList = DateTime.Now;
            }

            //Registrar el corte desde el dto del dialog y el id del asentamiento
            corte.IdCategori = cortedialog.IdCategori;
            corte.CdisListo = cortedialog.CdisListo;
            if (corte.CdaccCorr != cortedialog.CdaccCorr)
            {
                corte.CdaccCorr = cortedialog.CdaccCorr;
                corte.CdfechAcci = DateTime.Now;
            }
            else
            {
                corte.CdfechAcci = corteeditar.CdfechAcci;
            }

            //si se llena un asentamiento nuevo se envia la listo sino solo se actualiza el corte

            if (corte.CdisListo)
            {
                //agregar el corte
                elemento.CorteDiscDTO.Add(corte);
                //LLenar lista de asentamiento
                await UpdateListaCortes(ListaSendAsenta);
            }
            else
            {
                await UpdateCorte(corte);
            }

        }
        loaddata = false;
    }

    CorteDiscDTO LlenarCorte(CortesVistaDTO corteeditar)
    {

        CorteDiscDTO corte = new CorteDiscDTO();
        corte.IdCorteDis = corteeditar.IdCorteDis;
        corte.IdCategori = corteeditar.IdCategori;
        corte.IdAsenta = corteeditar.IdAsenta;
        corte.CdaccCorr = corteeditar.CdaccCorr;
        corte.CdisListo = corteeditar.CdisListo;
        return corte;
    }

    AsentumDTO LlenarAsentamiento(CortesVistaDTO corteeditar)
    {
        AsentumDTO asentamientoNuevo = new AsentumDTO();
        asentamientoNuevo.IdAsenta = corteeditar.IdAsenta;
        asentamientoNuevo.IdInfoAse = corteeditar.IdInfoAse;
        asentamientoNuevo.IdRango = corteeditar.IdRango;
        asentamientoNuevo.Avalor = corteeditar.Avalor;
        asentamientoNuevo.Aobserv = corteeditar.Aobserv;
        asentamientoNuevo.AisActivo = true;
        return asentamientoNuevo;
    }

    public async Task UpdateListaCortes(List<AsentumDTO> ListaSendAsenta)
    {
        //LLenar lista de asentamiento
        var result = await CorteDiscrepanciaDataService.UpdateAentamientosCortes(ListaSendAsenta);

        if (result)
        {
            await ConsultarCortes();
            NotificationService.Notify(NotifiRadzenServices.Notificacion("exito", "", "Registro Exitoso"));
        }
        else
        {
            NotificationService.Notify(NotifiRadzenServices.Notificacion("error", "Atención", "No se pudo registrar."));
        }
    }

    public async Task UpdateCorte(CorteDiscDTO corteupdate)
    {
        var result = await CorteDiscrepanciaDataService.UpdateCorte(corteupdate);
        if (result)
        {
            await ConsultarCortes();
            NotificationService.Notify(NotifiRadzenServices.Notificacion("exito", "", "Registro Exitoso"));
        }
        else
        {
            NotificationService.Notify(NotifiRadzenServices.Notificacion("advertencia", "Atención", "Ocurrió un error en la actualización"));
        }
    }

    protected async Task GetCategorias()
    {
        categorias = await CorteDiscrepanciaDataService.GetCategorias();
    }
    private async Task CambioFiltros(bool value)
    {
        //Confirmación de actualización de consulta a cambiar modo de filtros
        if (filtrosextras && !value && listacortes.Count > 0)
        {

            var result = await DialogService.Confirm("Confirmación",
            "Si Activa/Desactiva los filtros, se eliminarán los registros cargados. ¿Está seguro/a?",
            new ConfirmOptions()
                {
                    OkButtonText = "Confirmar",
                    CancelButtonText = "Cancelar",
                    ShowClose = false,
                }

            );
            if (!result.Value)
            {
                filtrosextras = filtrosextrasvisual = !value;
            }
            else
            {
                filtrosextras = filtrosextrasvisual = value;
                await ConsultarCortes();
            }
        }
        else
        {
            filtrosextras = filtrosextrasvisual = value;
        }
    }
}