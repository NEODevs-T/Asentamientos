@inject AuthenticationStateProvider AuthStateProvider
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject TooltipService tooltipService
@inject ILocalStorageService LocalStorage
@inject INotifiRadzenServices NotifiRadzenServices
@inject ICorteDiscrepancia CorteDiscrepanciaDataService
@inject IRolLogic RolLogicService

@page "/fuerarango"

<FiltroMaestras OnChangepais="((int p) => this.valuepais = p)"
                OnChangeempresa="((int e) => this.valueempresa = e)"
                OnChangecentros="((int c) => this.valuecentros = c)"
                OnChangedivision="((int d) => this.valuedivision = d)"
                OnChangelineas="((int l) => this.valuelinea = l)" />

@if (filtrosextras == true && valuelinea != 0)
{
    <FiltrosAsentamientos idLinea="@valuelinea" OnChangeClasificacion="((int idClasiVar) => this.idClasiVar = idClasiVar)" OnChangeProducto="((int idProducto) => this.idProducto = idProducto)" OnChangeSeccion="((int idSeccion) => this.idSeccion = idSeccion)" />


}
@if (valuelinea != 0)
{
    <FiltroGrupoTurno idEmpresa="@valueempresa" OnChangeGrupo="((string g) => this.grupo = g)" OnChangeTurno="((string t) => this.turno = t)" />
}

@if (valuelinea != 0 && turno is not null)
{
    @*     Barra de filtro y opciones *@
    <RadzenCard Variant="Variant.Filled" Class="rz-my-4 rz-mx-auto rz-background-color-base-50">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start" JustifyContent="JustifyContent.Normal" Wrap="FlexWrap.Wrap">
            <RadzenColumn class="rz-ml-8">
                <RadzenLabel Text="Fecha" Component="DatePickerHourFormat" />
                <RadzenDatePicker @bind-Value=@fecha HourFormat="12" DateFormat="MM/dd/yyyy" Name="DatePickerHourFormat" Style="width:120px;" />
            </RadzenColumn>
            <RadzenColumn class="rz-ml-8">
                <RadzenButton ButtonType="ButtonType.Button" Icon="search" Variant="Variant.Flat" Disabled="false" Text="Consultar" ButtonStyle="ButtonStyle.Success" Click=ConsultarAsentamientos />
            </RadzenColumn>
            <RadzenColumn class="rz-ml-8" Visible=@(permisos["Centro"])>
                <RadzenRow>
                    <RadzenText TextStyle="TextStyle.Caption"> Filtros:</RadzenText>
                </RadzenRow>
                <RadzenRow>
                    @*  <RadzenCheckBox @bind-Value="@filtrosextras" ValueChanged="CambioFiltros" /> *@
                    <RadzenCheckBox @bind-Value="@filtrosextrasvisual" TValue="bool" Change=@CambioFiltros />
                </RadzenRow>
            </RadzenColumn>
            @if (data == 1 && ListaFueraRango.Count > 0)
            {
                <RadzenColumn class="rz-ml-8">
                    <RadzenLabel Text="Mostrar todos" Component="allowVirtualization" />
                    <RadzenCheckBox @bind-Value="@allowVirtualization" Name="allowVirtualization" />
                </RadzenColumn>

                <RadzenColumn class="rz-ml-8">
                    <RadzenRow>
                        <RadzenText TextStyle="TextStyle.Caption"> Modo de registro:</RadzenText>
                    </RadzenRow>
                    <RadzenRow>
                        <RadzenSwitch @bind-Value=@ModoCorteValue Change="Cambio" />
                        <RadzenText TextStyle="TextStyle.Caption">@textModoCorteValue</RadzenText>
                        </RadzenRow>
                    </RadzenColumn>

                <RadzenColumn class="rz-ml-8" Visible="@(ModoCorteValue)">
                    <RadzenButton ButtonType="ButtonType.Button" Icon="save_as" Variant="Variant.Flat" Disabled="false" Text="Guardar Lista" ButtonStyle="ButtonStyle.Primary" Click="AddListaCorteDiscrepancia" />
                </RadzenColumn>

            }
        </RadzenStack>
    </RadzenCard>
}
<RadzenDataList Visible="@(data==1)" Data="@ListaFueraRango" TItem="AsentumDTO" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true" PageSize="5" AllowVirtualization=@allowVirtualization WrapItems="@(!allowVirtualization)" AllowPaging="@(!allowVirtualization)" Style="@(allowVirtualization ? "height:70%;overflow:auto;" : "")">
    <Template Context="lista">
        @*TODO: Mostar los asentamiento nuevo con idasenta 0 sin que de error*@
        <RadzenCard Style="width: 100%; padding: 0;" Class="rz-shadow-2" Visible="@(lista.IdAsenta>0)">
            <RadzenRow Gap="0" RowGap="0">
                <RadzenColumn Size="12" SizeLG="3" Class="@GetClass(lista)">

                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto" class="rz-color-base-800">@(lista.RangoDTONavigation.VariableDTONavigation.SeccionDTONavigation.Snombre)</RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto" class="rz-color-base-900">@(lista.RangoDTONavigation.ProductoDTONavigation.Pnombre)-@(lista.RangoDTONavigation.ProductoDTONavigation.Pcodigo)</RadzenText>
                    <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto" class="rz-color-base-900">@(lista.RangoDTONavigation.VariableDTONavigation.Vnombre)</RadzenText>

                </RadzenColumn>
                <RadzenColumn Size="12" SizeLG="8" Class="@GetClassCorte(lista.CorteDiscDTO.Count)">
                    <RadzenRow Gap="0" RowGap="0">
                        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                            <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto" Class="rz-mb-0 rz-color-base-800">Valor</RadzenText>
                            <RadzenText TextStyle="TextStyle.Subtitle1">@(lista.Avalor)</RadzenText>
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                            <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto" Class="rz-mb-0 rz-color-base-800">@GetLabel(lista)</RadzenText>
                                <RadzenText TextStyle="TextStyle.Subtitle1">@GetValue(lista)</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
                                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto" Class="rz-mb-0 rz-color-base-800">Valor Obj.</RadzenText>
                                <RadzenText TextStyle="TextStyle.Subtitle1">@(lista.RangoDTONavigation.Robj)</RadzenText>
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="6" SizeLG="3" Class="rz-text-align-start rz-text-align-lg-center rz-my-auto">
                                <RadzenBadge BadgeStyle="BadgeStyle.Info" Shade="Shade.Light" class="unidad-badge" Text="@(lista.RangoDTONavigation.VariableDTONavigation.UnidadDTONavigation.Unombre)" />
                            </RadzenColumn>

                            @if (lista.CorteDiscDTO.Count > 0)
                        {

                            <RadzenColumn Size="12" SizeMD="4" SizeLG="2">
                                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto" Class="rz-mb-0 rz-color-base-800">Categoria</RadzenText>
                                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.Auto">@(categorias.First(c => c.IdCategori == lista.CorteDiscDTO.First().IdCategori).Cnombre)</RadzenText>
                            </RadzenColumn>

                            <RadzenColumn Size="12" SizeMD="8" SizeLG="10">
                                <RadzenText TextStyle="TextStyle.Subtitle1" TagName="TagName.H6" Class="rz-mb-0 rz-color-base-800">Acción</RadzenText>
                                <RadzenText>@(lista.CorteDiscDTO.First().CdaccCorr)</RadzenText>
                            </RadzenColumn>

                        }
                    </RadzenRow>
                </RadzenColumn>

                <RadzenColumn Size="12" SizeLG="1" Class="rz-my-auto">
                    @if (lista.CorteDiscDTO.Count == 0)
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Success" class="rz-border-radius-2" Icon="add_circle_outline"
                                      MouseEnter="@((args) => tooltipService.OpenOnTheTop(args, "Crear Corte",new TooltipOptions{ Duration=1000}))"
                                      Size="ButtonSize.Medium" Style="width: 100%; " Click=@( () => ShowDialog(lista) ) />

                    }
                    else
                    {
                        <RadzenButton ButtonStyle="ButtonStyle.Secondary" class="rz-border-radius-2" Icon="assignment_late"
                                      MouseEnter="@((args) => tooltipService.OpenOnTheTop(args, "Editar Corte",new TooltipOptions{  Duration=1000}))"
                                      Size="ButtonSize.Medium" Style="width: 100%" Click=@( () => ShowDialog(lista) ) />

                    }
                </RadzenColumn>

            </RadzenRow>
        </RadzenCard>
    </Template>
</RadzenDataList>

<RadzenText Visible="@(data==2)">
    <RadzenIcon Icon="done" IconColor="@Colors.Success" />
    No hay datos fuera de rango...
</RadzenText>

@if (loading)
{
    <Load />
}



@code {
    [CascadingParameter]
    private IEnumerable<Claim>? claims { get; set; }

    public List<AsentumDTO>? ListaFueraRango { get; set; } = new List<AsentumDTO>();
    public List<AsentumDTO>? ListaAdd { get; set; } = new List<AsentumDTO>();
    public List<CorteDiscDTO>? cortes { get; set; } = new List<CorteDiscDTO>();
    public List<CategoriaDTO>? categorias { get; set; }

    bool allowVirtualization = false; //renderizado y paginacion de los datos mostrados del datalist
    bool ModoCorteValue { get; set; } //Carga individula o cargar con  listas el corte
    bool loading = false; //motrar loading
    bool filtrosextrasvisual = true; //motrar lfiltros extras
    bool filtrosextras = true; //motrar lfiltros extras
    int data = 0; //1-motrar tabla de datos 2-no haydata

    string? textModoCorteValue { get; set; } //texto de value para modo de registro de cortes

    //parametros retornado en el componente Hijo FiltroMaestra
    public int valuepais { get; set; } = 0;
    public int valueempresa { get; set; } = 0;
    public int valuecentros { get; set; } = 0;
    public int valuedivision { get; set; } = 0;
    public int valuelinea { get; set; } = 0;

    //parametros retornado en el componente Hijo FiltroAsentamientos
    public int idClasiVar { get; set; } = 0;
    public int idSeccion { get; set; } = 0;
    public int idProducto { get; set; } = 0;

    //parametros retornado en el componente Hijo FiltroGrupoTurno
    public string grupo { get; set; } = "";
    public string turno { get; set; } = "";

    //TODO: Crear registro de corte y filtros de consulta por fecha
    DateTime fecha = DateTime.Now;
    //string fecha1 = "2024-01-10";

    Dictionary<string, bool> permisos = new Dictionary<string, bool>();
    public string? roleClaim { get; set; } //guardar el rol del usuario
    public string? Ficha { get; set; } //guardar la ficha del usuario


    protected override async Task OnInitializedAsync()
    {
        await CreateData();

        textModoCorteValue = await LocalStorage.GetItemAsStringAsync("ModoCorteValue");
      
        if (string.IsNullOrEmpty(textModoCorteValue))
        {
            textModoCorteValue = "Individual";
            ModoCorteValue = false;
            await LocalStorage.SetItemAsync("ModoCorteValue", textModoCorteValue);
        }
        else if (textModoCorteValue == "Individual")
        {
            ModoCorteValue = false;
        }
        else
        {
            textModoCorteValue = "Cargar lista total";
            ModoCorteValue = true;
        }

        permisos = RolLogicService.ListasRol(roleClaim);
        await GetCategorias();
    }

    private async Task CreateData()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user?.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
        }
        //Obtner Rol
        roleClaim = claims.FirstOrDefault(c => c.Type.Contains("role"))?.Value;
        Ficha = claims.FirstOrDefault(c => c.Type.Equals("Ficha"))?.Value;
    }

    public async Task ConsultarAsentamientos()
    {

        data = 0;
        loading = true;
        string fecha1 = fecha.Date.ToString("yyyy-MM-dd");
        if (!string.IsNullOrEmpty(grupo) && !string.IsNullOrEmpty(turno))
        {
            if (filtrosextras)
            {
                if (idClasiVar > 0 && idProducto > 0)
                {

                    ListaFueraRango = await CorteDiscrepanciaDataService.GetAsentamientosFueraRangoFiltros(turno, fecha1, valuelinea, idClasiVar, idSeccion, idProducto);
                    data = ListaFueraRango.Count > 0 ? 1 : 2;
                    NotificationService.Notify(NotifiRadzenServices.Notificacion("info", "", "Datos Actualizados"));
                }
                else
                {
                    data = 1;
                    NotificationService.Notify(NotifiRadzenServices.Notificacion("advertencia", "", "Seleccione los los filtros para consultar."));
                }
            }
            else
            {
                ListaFueraRango = await CorteDiscrepanciaDataService.GetAsentamientosFueraRango(turno, fecha1, valuelinea);

                data = ListaFueraRango.Count > 0 ? 1 : 2;
                NotificationService.Notify(NotifiRadzenServices.Notificacion("info", "", "Datos Actualizados"));
            }
        }
        else
        {
            NotificationService.Notify(NotifiRadzenServices.Notificacion("advertencia", "", "Seleccione los los filtros grupo y turno."));
        }
        loading = false;
    }

    async Task ShowDialog(AsentumDTO asentamiento)

    {
        DialogCorteDTO cortedialog = new DialogCorteDTO();
        CorteDiscDTO corte = new CorteDiscDTO();//corte para enviar y recibir en caso de edicion
        AsentumDTO asentamientoNuevo = new AsentumDTO();

        //
        if (asentamiento.CorteDiscDTO.Count > 0)
        {
            corte = asentamiento.CorteDiscDTO.First();
        }
        //si el usuiario es operador enviar un Definir en el plan de accion
        if (!permisos["Centro"])
        {
            corte.CdaccCorr = "Definir";
        }
        //dialog para corte
        cortedialog = await DialogService.OpenSideAsync<DialogSideContent>(

           $"Registrar Corte: {asentamiento.RangoDTONavigation.VariableDTONavigation.Vnombre}",
           parameters: new Dictionary<string, object?>()
                                                {
                { "categorias", categorias },
                { "lmin",asentamiento.RangoDTONavigation.Rmin },
                {"lmax",asentamiento.RangoDTONavigation.Rmax},
                {"corteparametro", corte },
                {"rol", permisos["Centro"] },
                {"obser", asentamiento.Aobserv }
                },

           options: new SideDialogOptions
               {
                   Position = DialogPosition.Right,
                   ShowMask = true,
                   CloseDialogOnOverlayClick = false
               });

        if (cortedialog is not null)
        {
            //asentamiento  fuera de rango
            var elemento = ListaFueraRango.First(a => a.IdAsenta == asentamiento.IdAsenta);

            //Registrar el corte desde el dto del dialog y el id del asentamiento
            corte = new CorteDiscDTO();
            corte.IdAsenta = asentamiento.IdAsenta;
            corte.IdCategori = cortedialog.IdCategori;
            corte.CdaccCorr = cortedialog.CdaccCorr;
            corte.CdisLibro = false;
            corte.CdfechAcci = DateTime.Now;
            corte.CdisListo = cortedialog.CdisListo;
            // corte.AsentumDTONavigation = elemento;

            if (cortedialog.CdisListo)
            {

                //Listo Fecha Listo
                corte.CdfechList = DateTime.Now;
             
                //crear nuevo asentamiento
                asentamientoNuevo.IdInfoAse = asentamiento.IdInfoAse;
                asentamientoNuevo.IdRango = asentamiento.IdRango;
                asentamientoNuevo.IdRango = asentamiento.IdRango;
                asentamientoNuevo.Avalor = cortedialog.Avalor;
                asentamientoNuevo.Aobserv = cortedialog.Aobserv;
                asentamientoNuevo.AisActivo = true;
                elemento.AisActivo = false;// desactivar el anterior

                ListaFueraRango.Add(asentamientoNuevo);//agrerar a la lista

            }


            // asentamiento.InfoAseDTONavigation.IafichaCor = Ficha;

            if (ModoCorteValue)
            {
                //Si se edita el corte,se limpia la lista para añadir corte nuevo.
                if (elemento.CorteDiscDTO.Count > 0)
                {
                    elemento.CorteDiscDTO.Clear();
                }
                elemento.CorteDiscDTO.Add(corte);
            }
            else
            {
                elemento.InfoAseDTONavigation = null;
                elemento.RangoDTONavigation = null;
                elemento.CorteDiscDTO.Add(corte);

                if (corte.CdisListo)
                {
                    List<AsentumDTO> insertasenta = new List<AsentumDTO>();
                    insertasenta.Add(ListaFueraRango.First(a => a.IdAsenta == corte.IdAsenta));

                    
                    insertasenta.Add(asentamientoNuevo);

                    await UpdateListaCortes(insertasenta);
                }
                else
                {
                    await SaveCorteDiscrepancia(corte);
                }
                await ConsultarAsentamientos();
            }
        }
    }

    private async Task CambioFiltros(bool value)
    {
        //Confirmación de actualización de consulta a cambiar modo de filtros
        if (ModoCorteValue)
        {
            if (ListaFueraRango.Any(c => c.CorteDiscDTO.Count > 0))
            {
                var result = await DialogService.Confirm("Confirmación",
                "Si Activa/Desactiva los filtros, se eliminarán los registros cargados. ¿Está seguro/a?",
                new ConfirmOptions()
                    {
                        OkButtonText = "Confirmar",
                        CancelButtonText = "Cancelar",
                        ShowClose = false,
                    }

                );
                if (!result.Value)
                {
                    filtrosextras = filtrosextrasvisual = !value;
                }
                else
                {
                    filtrosextras = filtrosextrasvisual = value;
                    await ConsultarAsentamientos();
                }
            }
            else
            {
                filtrosextras = filtrosextrasvisual = value;
                //siempre al desactivar los filtros seactualiza si hay datos en la lista
                if (!filtrosextras && ListaFueraRango.Count > 0)
                {
                    await ConsultarAsentamientos();
                }
            }
        }
        else
        {
            filtrosextras = filtrosextrasvisual = value;
        }
    }

    private async Task Cambio()
    {
        if (textModoCorteValue == "Cargar lista total" && !ModoCorteValue)
        {
            if (ListaFueraRango.Any(c => c.CorteDiscDTO.Count > 0))
            {
                var result = await DialogService.Confirm("Confirmación",
                "Si cambia el modo de registro a individual, se eliminarán los registros cargados. ¿Está seguro/a?",
                new ConfirmOptions()
                    {
                        OkButtonText = "Confirmar",
                        CancelButtonText = "Cancelar",
                        ShowClose = false,
                    }
                );
                if (!result.Value)
                {
                    ModoCorteValue = true;

                }
                else
                {
                    ModoCorteValue = false;
                    await ConsultarAsentamientos();
                }
            }
        }
        else
        {
            ModoCorteValue = true;
        }
        textModoCorteValue = ModoCorteValue ? "Cargar lista total" : "Individual";
        await LocalStorage.SetItemAsStringAsync("ModoCorteValue", textModoCorteValue);
    }

    protected async Task GetCategorias()
    {
        categorias = await CorteDiscrepanciaDataService.GetCategorias();
    }

    public async Task AddListaCorteDiscrepancia()
    {
        var listadocortes = ListaFueraRango.Where(a => a.IdAsenta > 0).ToList();
        bool cargar = true;
        foreach (var a in listadocortes)
        {
            if (a.CorteDiscDTO.Count == 0)
            {
                cargar = false;
                break;
            }
        }
        if (cargar)
        {
            //TODO: Enviaer copia de la lista, o crear dto de consulta para fuera rango.
            var result = await CorteDiscrepanciaDataService.UpdateAentamientosCortes(ListaFueraRango);

            if (result)
            {
                await ConsultarAsentamientos();
                NotificationService.Notify(NotifiRadzenServices.Notificacion("exito", "", "Registro Exitoso"));
            }
            else
            {
                NotificationService.Notify(NotifiRadzenServices.Notificacion("error", "Atención", "No se pudo registrar."));
            }
        }
        else
        {
            NotificationService.Notify(NotifiRadzenServices.Notificacion("advertencia", "Atención", "No se han llenado todos los asentamientos fuera de rango"));
        }
    }

    public async Task SaveCorteDiscrepancia(CorteDiscDTO corte)
    {
        var result = await CorteDiscrepanciaDataService.AddCorteDiscrepancia(corte);
        if (result is bool && (bool)result)
        {
            NotificationService.Notify(NotifiRadzenServices.Notificacion("exito", "", "Registro Exitoso"));
        }
        else if (result is string)
        {
            NotificationService.Notify(NotifiRadzenServices.Notificacion("advertencia", "Atención", $"Error: {result}"));
        }
    }

    public async Task UpdateListaCortes(List<AsentumDTO> ListaSendAsenta)
    {
        //LLenar lista de asentamiento
        var result = await CorteDiscrepanciaDataService.UpdateAentamientosCortes(ListaSendAsenta);

        if (result)
        {
            NotificationService.Notify(NotifiRadzenServices.Notificacion("exito", "", "Registro Exitoso"));
        }
        else
        {
            NotificationService.Notify(NotifiRadzenServices.Notificacion("error", "Atención", "No se pudo registrar."));
        }
    }

    //retornar Clases
    string GetClass(AsentumDTO lista)
    {
        if (lista.IdAsenta == 0 || lista.RangoDTONavigation == null)
        {
            return "rz-p-4"; // Retornar un string vacío
        }
        return lista.Avalor > lista.RangoDTONavigation.Rmax ? "rz-p-4 variableMax" : "rz-p-4 variableMin";
    }

    string GetLabel(AsentumDTO lista)
    {
        if (lista.IdAsenta == 0)
        {
            return ""; // Retornar un string vacío
        }
        return lista.Avalor > lista.RangoDTONavigation.Rmax ? "Valor Max." : "Valor Min.";
    }

    double GetValue(AsentumDTO lista)
    {
        if (lista.IdAsenta == 0)
        {
            return 0;
        }
        return lista.Avalor > lista.RangoDTONavigation.Rmax ? lista.RangoDTONavigation.Rmax : lista.RangoDTONavigation.Rmin;
    }

    string GetClassCorte(int valor)
    {
        if (valor == 0)
        {
            return "rz-p-4"; // Retornar un string vacío
        }
        return valor > 0 ? "rz-p-4 cortecargado" : "rz-p-4 ";
    }


}

