@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject IRangoData RangoData
@inject IMaestraData MaestaData
@inject IAsentamientoData AsentamientoData
@inject INotifiRadzenServices  NotifiRadzenServices
@page "/Registro"

<PageTitle>Registro de Asentamientos</PageTitle>

<h1>Asentamientos</h1>

<FiltroMaestras OnChangepais="((int p) => this.idPais = p)" OnChangecentros="((int c) => this.idCentro = c)" OnChangeempresa="((int e) => this.idEmpresa = e)" OnChangelineas="((int l) => this.idLinea = l)" />


@if(idLinea != 0){
    <FiltrosAsentamientos idLinea="@idLinea" OnChangeClasificacion="((int idClasiVar) => this.idClasiVar = idClasiVar)" OnChangeProducto="((int idProducto) => this.idProducto = idProducto)" OnChangeSeccion="((int idSeccion) => this.idSeccion = idSeccion)"/>
    
    @if(idClasiVar != 0 && idSeccion != 0 && idProducto != 0){
        <FiltroGrupoTurno idEmpresa="@idEmpresa" idCentro="@idCentro" OnChangeGrupo="((string g) => this.grupo = g)" OnChangeTurno="((string t) => this.turno = t)"/>
    }
}


@if(idClasiVar != 0 && idSeccion != 0 && idProducto != 0 && grupo != "" && turno != ""){
    
    @if(!isFicha){
        <RadzenRow class="rz-text-align-Left">
            <RadzenColumn Size="2">
                <div class="rz-p-sm-2 rz-text-align-left">
                    <RadzenLabel Text="Ficha" />
                    <RadzenTextBox Name="Ficha" id="Ficha" Style="width: 100%; max-width: 350px;min-width: 90px;" @bind-Value=ficha/>
                </div>
            </RadzenColumn>
        </RadzenRow>
    }

    <RadzenButton class="mt-4" ButtonType="ButtonType.Button" Variant="Variant.Outlined" Disabled="false" Text="Consultar" ButtonStyle="ButtonStyle.Success" Click=Consultar />
    <br>
    <br>
}


@if(band){
    <RadzenDataGrid class="table rz-mb-1" Data="@listaAsentamientos" TItem="Asentum" AllowVirtualization="true"
                AllowSorting="true" AllowColumnResize=true GridLines="DataGridGridLines.Both">
                
                <Columns>
                    <RadzenDataGridColumn Width="3%" TItem="Asentum" Title="#" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenText class="mb-0 tipografia">@(listaAsentamientos.IndexOf(data) + 1)</RadzenText>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Asentum" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Property="IdRangoNavigation.IdVariableNavigation.IdSeccionNavigation.Snombre" Title="Sección" />
                    <RadzenDataGridColumn TItem="Asentum" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Property="IdRangoNavigation.IdVariableNavigation.Vnombre" Title="Variable" />
                    <RadzenDataGridColumn TItem="Asentum" Title="Valor" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenNumeric Step="0.5" @bind-Value="data.Avalor" Min="@Convert.ToDecimal(data.IdRangoNavigation.RlimMin)" Max="@Convert.ToDecimal(data.IdRangoNavigation.RlimMax)" style="width: 100%;"/>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Asentum" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Property="IdRangoNavigation.IdVariableNavigation.IdUnidadNavigation.Unombre" Title="Unidad" />
                    <RadzenDataGridColumn TItem="Asentum" Title="Observación" Filterable="false" Sortable="false" TextAlign="TextAlign.Center">
                        <Template Context="data">
                            <RadzenTextArea @bind-Value="data.Aobserv" style="width: 100%;"/>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
                
    </RadzenDataGrid>
    <RadzenRow class="rz-text-align-Left rz-mt-0" >
        <RadzenColumn Size="12">
            <div class="rz-text-align-left">
                <RadzenTextArea Rows="4" Placeholder="Observación" @bind-Value=informeAsentamientos.Iaobser class="w-100" aria-label="TextArea" />
            </div>
        </RadzenColumn>
    </RadzenRow>

    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.End" JustifyContent="JustifyContent.SpaceBetween" Wrap="FlexWrap.NoWrap">
        <RadzenButton class="mt-4" ButtonType="ButtonType.Button" Variant="Variant.Outlined" Disabled="false" Text="Registrar" ButtonStyle="ButtonStyle.Success" Click=CargarDatos />
    </RadzenStack>
    
}else if(isCargando){
    <Load/>
}

@code {
    [CascadingParameter]
    private IEnumerable<Claim>? claims { get; set; }
    public int idLinea {get; set;} = 0;
    public int idEmpresa {get; set;} = 0;
    public int idCentro {get; set;} = 0;
    public int idPais {get; set;} = 0;
    public int idClasiVar {get; set;} = 0;
    public int idSeccion {get; set;} = 0;
    public int idProducto {get; set;} = 0;
    public int min {get; set;} = 0;
    public int max {get; set;} = 1000;
    public double intValue {get; set;} = 0;
    public bool band  {get; set;} = false;
    public bool isCargando  {get; set;} = false;
    public bool isOk {get; set;} = false;
    public bool isAsentamientoHoy {get; set;} =  false;
    public bool isFicha {get; set;} =  true;
    public string grupo {get; set;} = "";
    public string turno {get; set;} = "";
    public string ficha {get; set;} = "";
    public List<Rango> listaRango {get; set;} = new List<Rango>();
    public FiltrosRangoControlDTO  filtros {get; set;} = new FiltrosRangoControlDTO();
    public FiltroGTDTO filtroGT {get; set;} = new FiltroGTDTO();
    public InformeConAsentamientosDTO asentamientos {get; set;} = new InformeConAsentamientosDTO();
    public  List<Asentum> listaAsentamientos {get; set;} = new List<Asentum>();
    public InfoAse informeAsentamientos {get; set;} = new InfoAse();
    protected override async Task OnInitializedAsync()
    {
        
        AuthenticationState? authState = await AuthStateProvider.GetAuthenticationStateAsync();;
        ClaimsPrincipal? user = authState?.User;
        if(user?.Identity is not null && user.Identity.IsAuthenticated){
            claims = user.Claims;
            ficha =  claims.FirstOrDefault(c => c.Type == "Ficha")?.Value ?? "0";
            if(ficha.Contains("null")){
                ficha = "";
                isFicha = false;
            }
        }
        
    }

    private async Task Consultar()
    {
        isCargando = true;
        band = false;

        filtros = new FiltrosRangoControlDTO();
        filtroGT = new FiltroGTDTO();
        informeAsentamientos = new InfoAse();
        listaAsentamientos = new List<Asentum>();
        Asentum valor;

        filtros.master = await MaestaData.GetMaestraPorLinea(idLinea);
        filtros.producto = idProducto;
        filtros.seccion = idSeccion;
        filtros.tipo = idClasiVar;
        filtroGT.turno = turno;
        filtroGT.grupo = grupo;

        isAsentamientoHoy = await AsentamientoData.GetIsAsentamientoHoy(filtros,idEmpresa,idCentro);

        if(!isAsentamientoHoy){
            listaRango = await RangoData.GetRangoDeControl(filtros);
            listaAsentamientos = new List<Asentum>(listaRango.Count());
            for(int i = 0; listaAsentamientos.Capacity > i ; i++){
                valor = new Asentum();
                valor.IdRangoNavigation = listaRango[i];
                valor.IdRango = valor.IdRangoNavigation.IdRango;
                valor.AisActivo = true;
                valor.Avalor =  0;
                listaAsentamientos.Add(valor);
            }
            band = true;
        }else{
            NotificationService.Notify(NotifiRadzenServices.Notificacion("advertencia","","Ya se realizo la carga de asentamientos por hoy."));
            band = false;
        }
        isCargando = false;
    }

    private async Task CargarDatos()
    {
        if(ficha.Trim() != ""){
            informeAsentamientos.Iagrupo = grupo;
            informeAsentamientos.Iaturno = turno;
            informeAsentamientos.Iaficha = ficha.ToUpper();
            isOk = await AsentamientoData.AddAsentamientosDelDia(idEmpresa,idPais,idCentro,informeAsentamientos,listaAsentamientos);
            if(isOk){
                NotificationService.Notify(NotifiRadzenServices.Notificacion("exito","","Registro exitoso"));
                informeAsentamientos = new InfoAse();
                listaAsentamientos = new List<Asentum>();
                isCargando = false;
                band = false;
            }else{
                NotificationService.Notify(NotifiRadzenServices.Notificacion("error","","Erro al insertar. Intente nuevamente"));
            }
        }else{
            NotificationService.Notify(NotifiRadzenServices.Notificacion("error","","Coloque la ficha"));
        }
    }
}